{"version":3,"sources":["AppNavbar.js","queue.png","Home.js","QueueList.js","QueueEdit.js","Context.js","LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","NavItem","className","NavLink","href","Component","Home","Container","fluid","style","display","src","queue","alt","Button","onClick","history","push","QueueList","queues","participants","name","owner","current","id","remove","a","fetch","method","then","updatedQueues","filter","i","map","console","log","length","queueList","whiteSpace","participant","index","ButtonGroup","size","iterate","Table","width","QueueEdit","emptyItem","item","handleChange","handleSubmit","match","params","json","client","event","target","value","preventDefault","title","Form","onSubmit","FormGroup","Label","for","type","onChange","autoComplete","sort","Math","random","splice","inputField","withRouter","globalStateContext","React","createContext","isLoggedIn","change","window","getCsrfToken","document","cookie","replace","Input","inputChange","error","handleError","opts","Forms","errcount","data","FormData","form","action","body","URLSearchParams","headers","v","redirected","location","url","catch","e","failure","field","errmsg","prevState","errmsgs","renderError","Object","values","find","changer","childProps","inputs","placeholder","errors","ref","fm","LoginPage","search","Consumer","get","App","isLoggenIn","response","success","localStorage","getItem","prevProps","setItem","Provider","path","exact","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.438b9568.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, NavbarBrand, NavItem, NavLink} from 'reactstrap';\nimport {Link} from 'react-router-dom';\n// import { globalStateContext } from \"./Context\"\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand/>\n            <NavbarBrand tag={Link} to=\"/EmptyQueue\">EmptyQueue</NavbarBrand>\n            <NavItem className=\"ms-auto\">\n                <NavLink href=\"/EmptyQueue/perform_login\">Login (эта кнопка не работает в pages)</NavLink>               \n            </NavItem>\n        </Navbar>;\n    }\n}","export default __webpack_public_path__ + \"static/media/queue.8f7e5006.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Button, Container } from 'reactstrap';\nimport queue from \"./queue.png\"\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid style={{ \n                    display: \"flex\",\n                    \"justifyContent\": \"center\",\n                    \"alignItems\": \"center\",\n                    \"flexDirection\": \"column\"\n                }}>\n                    <img src={queue} alt=\"\"></img>\n                    <h3>EmptyQueue - service for building queues.</h3>  \n                    <Button  onClick={()=> {this.props.history.push('/EmptyQueue/queue')}}>Get started</Button>\n                    <Button  onClick={()=> {this.props.history.push('/EmptyQueue/perform_login')}}>Login (поэтому здесь я нарисовал такую)</Button>\n                </Container>\n                \n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass QueueList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {queues: [{\n            participants: [\"Жора\", \"Дима\", \"Стасян\"], name: \"Кто следующий идет за доставкой\", owner: \"master\", current: 0, id: 0\n        }]};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        // fetch('/queue')\n        //     .then(response => response.json())\n        //     .then(data => this.setState({queues: data}));\n        \n    }\n\n    async remove(id) {\n        await fetch(`/queue/${id}`, {\n            method: 'DELETE',\n            // headers: {\n            //     'Accept': 'application/json',\n            //     'Content-Type': 'application/json'\n            // }\n        }).then(() => {\n            let updatedQueues = [...this.state.queues].filter(i => i.id !== id);\n            this.setState({queues: updatedQueues});\n        });\n    }\n\n    async iterate(id) {\n        // fetch(`/queue/${id}`, {\n        //     method: 'PUT',\n        //     headers: {\n        //         'Accept': 'application/json',\n        //         'Content-Type': 'application/json',\n        //         'Access-Control-Allow-Origin': 'origin-list'\n        //     }\n        // }).then(() => {\n        //     let updatedQueues = [...this.state.queues]\n        //     updatedQueues[id].current = (updatedQueues[id].current + 1) % updatedQueues[id].participants.length;\n        //     this.setState({queues: updatedQueues});\n        // });\n        let updatedQueues = [...this.state.queues].map((queue, i) => {\n            console.log(i + \" \" + id);\n            if (i === id) {\n                queue.current = (queue.current + 1) % queue.participants.length;\n            }\n            return queue;\n        })\n        // updatedQueues[id].current = (updatedQueues[id].current + 1) % updatedQueues[id].participants.length;\n        this.setState({queues: updatedQueues});\n    }\n\n    render() {\n        const {queues} = this.state;\n\n        const queueList = queues.map(queue => {\n            return <tr key={queue.id}>\n                <td style={{whiteSpace: 'nowrap'}}>{queue.name}</td>\n                <td>{queue.participants[queue.current]}</td>\n                <td> {queue.participants.map((participant, index) => {\n                    return <div key={index}>{participant}<br/></div>\n                })}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" onClick={() => this.iterate(queue.id)}>Iterate</Button>\n                        <Button size=\"sm\" color=\"secondary\" tag={Link} to={\"/EmptyQueue/queue/new\" + queue.id}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(queue.id)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/EmptyQueue/queue/new\">Add Queue</Button>\n                    </div>\n                    <h3>Queues</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"30%\">Name</th>\n                            <th width=\"30%\">Next</th>\n                            <th width=\"30%\">Participants</th>\n                            <th width=\"40%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {queueList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default QueueList;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass QueueEdit extends Component {\n    emptyItem = {\n        name: '',\n        participants: ['', '']\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const client = await (await fetch(`/queue/${this.props.match.params.id}`)).json();\n            this.setState({item: client});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        if (name === \"name\") {\n            item[name] = value;\n        }\n        else {\n            item.participants[name] = value;\n        }\n        this.setState({item});\n    }\n\nasync handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n    // await fetch('/queue' + (item.id ? '/' + item.id : ''), {\n    //     method: 'POST',\n    //     headers: {\n    //         'Accept': 'application/json',\n    //         'Content-Type': 'application/json'\n    //     },\n    //     body: JSON.stringify(item),\n    // });\n    this.props.history.push('/EmptyQueue/queue');\n}\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Queue' : 'Add Queue'}</h2>;\n        const inputField = (participant, index) => <FormGroup key={index} className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">#{index + 1}</span>\n            </div>\n            <Input type=\"text\" name={index} id={index} value={participant}  autoComplete={participant} onChange={this.handleChange} style={{width: \"50%\"}}></Input>\n            <Button color=\"primary\" \n                onClick={() => {\n                    if (index > 0) {\n                        item.participants[index] = item.participants[index - 1];\n                        item.participants[index - 1] = participant;\n                    }\n                    this.setState({item});\n                }}> Up\n            </Button>\n            <Button color=\"secondary\" \n                onClick={() => {\n                    if (index !== item.participants.length - 1) {\n                        item.participants[index] = item.participants[index + 1];\n                        item.participants[index + 1] = participant;\n                    }\n                    this.setState({item});\n                }}> Down\n            </Button>\n            <Button color=\"danger\" \n                onClick={() => {\n                    if (item.participants.length > 2) {\n                        this.state.item.participants.splice(index, 1);\n                    }\n                    this.setState({item});\n                }}> Remove\n            </Button>\n        </FormGroup>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"name\">Name</Label>\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                               onChange={this.handleChange} autoComplete=\"name\"/>\n                    </FormGroup>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"participants\">Participants</Label>{'  '}\n                        <Button color=\"primary\" \n                            onClick={() => {\n                                item.participants.push(\"\"); \n                                this.setState({item});\n                            }}> Add\n                        </Button>{'  '}\n                        <Button color=\"success\" onClick={() =>{\n                                item.participants.sort( () => .5 - Math.random() );\n                                this.setState({item});\n                            }}>Shuffle\n                        </Button>\n                    </FormGroup>\n                        {item.participants.map((participant, index) => inputField(participant, index))}\n                    <FormGroup className=\"mb-3\">\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/EmptyQueue/queue\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(QueueEdit);","import React from 'react';\n\nexport const globalStateContext = React.createContext({\n    isLoggedIn: true,\n    change: () => {}\n});","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { FormGroup, Button} from 'reactstrap';\nimport PropTypes from 'prop-types'\nimport \"./LoginPage.css\";\nimport { globalStateContext } from \"./Context\"\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nwindow.getCsrfToken = () => {\n    return document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*\\s*([^;]*).*$)|^.*$/, '$1');\n}\n\nclass Input extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      value: props.value? props.value : '',\n      className: props.className? props.className : '',\n      error: false\n    }\n  }\n\n  inputChange = (event) => {\n    const value = event.target.value\n    this.setState({ value: value })\n  }\n\n  render (){\n    const {handleError, ...opts} = this.props\n    this.handleError = handleError\n    return (\n      <input {...opts} value={this.state.value} onChange={this.inputChange} className={this.state.className} /> \n    )\n  }\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  className: PropTypes.string,\n  handleError: PropTypes.func,\n  value: PropTypes.string\n}\n\nclass Forms extends Component {\n\n  constructor(props){\n    super(props)\n    this.change = props.changer\n    this.childProps = { ...this.props }\n    delete this.childProps.changer\n    if(props.error){\n      this.state = { failure: 'wrong username or password!', errcount: 0 }\n    }else{\n      this.state = { errcount: 0 }\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    // this.change();\n    // console.log(\"hey\")\n    if(!this.state.errcount) {\n      const data = new FormData(this.form)\n      fetch(this.form.action, {\n        method: this.form.method,\n        body: new URLSearchParams(data),\n        headers: { 'X-XSRF-TOKEN': window.getCsrfToken() },\n      }).then(v => {\n        if(v.redirected) window.location = v.url\n        this.change(true);\n      })\n      .catch(e => {\n        this.setState({ failure: 'wrong username or password!', errcount: 0 })\n      })\n    }\n  }\n\n  handleError = (field, errmsg) => {\n    if(!field) return\n\n    if(errmsg){\n      this.setState((prevState) => ({\n        failure: '',\n        errcount: prevState.errcount + 1, \n        errmsgs: {...prevState.errmsgs, [field]: errmsg}\n      }))\n    } else {\n      this.setState((prevState) => ({\n        failure: '',\n        errcount: prevState.errcount===1? 0 : prevState.errcount-1,\n        errmsgs: {...prevState.errmsgs, [field]: ''}\n      }))\n    }\n  }\n\n  renderError = () => {\n    if(this.state.errcount || this.state.failure) {\n      const errmsg = this.state.failure || Object.values(this.state.errmsgs).find(v=>v)\n      console.log(`error: ${errmsg}`)\n      return <div className=\"error\">{errmsg}</div>\n    }\n  }\n\n  render() {\n    const inputs = this.props.inputs.map(\n            ({name, placeholder, type, value, className}, index) => {\n                return <FormGroup className=\"mb-3\"key={index} >\n                  { className ? <Button key={index} name={name} placeholder={placeholder} type={type} value={value} color=\"success\" className='btn'>Submit</Button>\n                  : <Input size=\"lg\" key={index} name={name} placeholder={placeholder} type={type} value={value} handleError={this.handleError} />\n                }\n                </FormGroup>;\n            }\n          )\n    const errors = this.renderError()\n    return (\n      <div className='Login'>\n        <h1>Welcome!</h1>\n        <form {...this.childProps} onSubmit={this.handleSubmit} ref={fm => {this.form=fm}} >\n            {inputs}\n            {errors}\n        </form>\n      </div>)\n      \n  }\n}\n\nForms.propTypes = {\n  name: PropTypes.string,\n  action: PropTypes.string,\n  method: PropTypes.string,\n  inputs: PropTypes.array,\n  error: PropTypes.string\n}\n\nconst inputs = [{\n    name: \"username\",\n    placeholder: \"username\",\n    type: \"text\"\n  },{\n    name: \"password\",\n    placeholder: \"password\",\n    type: \"password\"\n  },{\n    type: \"submit\",\n    value: \"Submit\",\n    className: \"btn\" \n  }]\n\n  \nclass LoginPage extends Component {\n    render() {\n        const props = {name: 'loginForm', method: 'POST', action: '/perform_login', inputs: inputs}\n        const params = new URLSearchParams(window.location.search)\n        return (<>                \n            <AppNavbar/>\n            <globalStateContext.Consumer>{({change}) => (\n              <Forms {...props} error={params.get('error')} changer={change} />\n            )}</globalStateContext.Consumer>\n            </>\n        );\n    }\n}\n\nexport default LoginPage;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport QueueList from './QueueList';\nimport QueueEdit from \"./QueueEdit\";\nimport LoginPage from './LoginPage';\nimport { globalStateContext } from './Context'\n\nclass App extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoggedIn !== prevState.isLoggedIn) {\n      localStorage.setItem(\"isLoggedIn\", this.state.isLoggedIn)\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.change = (isLoggenIn) => {\n      this.setState(state => ({\n        isLoggedIn:\n          isLoggenIn\n      }));\n      console.log(\"CHANGE!!!\");\n      console.log(this.state.isLoggedIn)\n      fetch(\"/check_login\").then(response => response.json()).then(response => {\n        console.log(\"fetched \" + response.success)\n      })\n    };\n    // localStorage.removeItem(\"isLoggedIn\");\n    const isLoggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\"\n    this.state = {\n      isLoggedIn: isLoggedIn,\n      change: this.change \n    };\n\n    // fetch(\"/check_login\").then(response => response.json()).then(response => {\n    //   console.log(\"fetched \" + this.state.isLoggedIn + \" \" + response.success);\n    //   this.state = {\n    //     isLoggedIn: response.success && isLoggedIn,\n    //     change: this.change\n    //   }\n    // })\n  }\n\n  render() {\n    return (\n      <globalStateContext.Provider value={this.state}>\n        <Router>\n          <Switch>\n            <Route path='/EmptyQueue/queue' exact={true} render={() => {\n               return <QueueList />\n              }}/>\n              <Route path='/' exact={true} component={Home}/>\n              <Route path='/EmptyQueue/' exact={true} component={Home}/>\n              <Route path='/EmptyQueue/queue/:id' render={() => (\n                  <QueueEdit />\n                )}/>\n            <Route path='/EmptyQueue/perform_login' component={LoginPage}/>\n            <Route path='/perform_logout' render={() => {\n              // fetch (\"/perform_logout\", {method: \"POST\"}).then(response => response.body).then(response => {console.log(response);this.change(false);}).catch(e => console.log(\"jopa \" + e));\n              return <Redirect to=\"/\"/>\n            }}/>\n          </Switch>\n        </Router>\n      </globalStateContext.Provider>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}